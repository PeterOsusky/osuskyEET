// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import MapKit;
@import CoreLocation;
@import CoreData;
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import StoreKit;
#endif

#import <XUCore/XUCore.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSDateFormatter (SWIFT_EXTENSION(XUCore))
/**
  Returns true if the current locale places the month before day.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isMonthBeforeDayInDateFormat;)
+ (BOOL)isMonthBeforeDayInDateFormat;
@end


@interface NSFileManager (SWIFT_EXTENSION(XUCore))
- (NSArray<NSURL *> * _Nonnull)contentsOfDirectoryAt:(NSURL * _Nonnull)url;
- (BOOL)createDirectoryAt:(NSURL * _Nonnull)url withIntermediateDirectories:(BOOL)intermediate;
@end

@class NSHTTPCookie;

@interface NSHTTPCookieStorage (SWIFT_EXTENSION(XUCore))
/**
  Looks through cookies returned by cookies(for:) for a cookie named “name”.
*/
- (NSHTTPCookie * _Nullable)cookieWithNamed:(NSString * _Nonnull)name for:(NSURL * _Nonnull)url;
@end


@interface NSHTTPURLResponse (SWIFT_EXTENSION(XUCore))
/**
  Return Content-Type from allHeaderFields
*/
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
/**
  Returns whether the statusCode of self is > 200 and < 300.
*/
@property (nonatomic, readonly) BOOL isStatusCodeWithin200Range;
@end


@interface NSInputStream (SWIFT_EXTENSION(XUCore))
@end

@class CLLocation;

@interface MKPolygon (SWIFT_EXTENSION(XUCore))
/**
  Parses the string as WKT and returns an MKPolygon.
  If the string is a point, a single-point polygon is returned.
  Nil is returned if no points are found.
*/
- (nullable instancetype)initWithWktString:(NSString * _Null_unspecified)string;
/**
  Returns the center of the polygon by approximation. Puts the polygon
  into a rectangle and returns the center of the rectangle.
*/
@property (nonatomic, readonly) CLLocationCoordinate2D centerCoordinate;
/**
  Returns the center of the polygon by approximation. Puts the polygon
  into a rectangle and returns the center of the rectangle.
*/
@property (nonatomic, readonly, strong) CLLocation * _Nonnull centerLocation;
@end

@class NSTextAttachment;

@interface NSAttributedString (SWIFT_EXTENSION(XUCore))
/**
  Returns all text attachments within self
*/
@property (nonatomic, readonly, copy) NSArray<NSTextAttachment *> * _Nonnull allAttachments;
@end

@class NSNumber;

@interface NSDecimalNumber (SWIFT_EXTENSION(XUCore))
+ (NSDecimalNumber * _Nonnull)decimalNumberWithDouble:(double)value;
+ (NSDecimalNumber * _Nonnull)decimalNumberWithNumber:(NSNumber * _Nullable)number;
/**
  Creates NSDecimalNumber from value. Accepted values are nil (returns 0),
  NSDecimalNumber, (NS)String and NSNumber.
*/
+ (NSDecimalNumber * _Nonnull)decimalNumberWithValue:(id _Nullable)value;
/**
  Creates NSDecimalNumber from value. Accepted values are nil (returns 0),
  NSDecimalNumber, (NS)String and NSNumber.
*/
- (nonnull instancetype)initWithValue:(id _Nullable)value;
/**
  Initializes self with a NSNumber instance.
*/
- (nonnull instancetype)initWithNumber:(NSNumber * _Nonnull)number;
/**
  Returns an absolute value of the decimal number.
*/
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull absoluteValue;
/**
  Returns a ceiled decimal number.
*/
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull ceiled;
/**
  Returns the decimal part - e.g. 5.32 –> 0.32.
*/
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull decimalPart;
/**
  Returns number without the decimal part.
*/
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull integralValue;
/**
  Rounds the decimal number.
*/
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull roundedDecimalNumber;
/**
  Returns whether this number is an integer, i.e. is the decimalPart is 0.0
*/
@property (nonatomic, readonly) BOOL isInteger;
/**
  Returns whether this number is less than 0.
*/
@property (nonatomic, readonly) BOOL isNegative;
/**
  Returns whether this number is more or equal to 0.
*/
@property (nonatomic, readonly) BOOL isPositive;
/**
  Returns true is the current double value is 0.0
*/
@property (nonatomic, readonly) BOOL isZero;
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull integral;
@end


@interface NSLock (SWIFT_EXTENSION(XUCore))
@end


@interface NSManagedObjectContext (SWIFT_EXTENSION(XUCore))
@end


@interface NSNumber (SWIFT_EXTENSION(XUCore))
- (NSString * _Nullable)searchFor:(NSString * _Nonnull)needle;
@end


@interface NSRecursiveLock (SWIFT_EXTENSION(XUCore))
@end


@interface NSString (SWIFT_EXTENSION(XUCore))
/**
  Returns self, if the range of needle (case insensitive), is found.
*/
- (NSString * _Nullable)searchFor:(NSString * _Nonnull)needle;
@end

@class XUSyncChange;
@class NSEntityDescription;

/**
  This is the base class for all synchronized objects. Upon insert, it generates
  a syncUUID, which is used for tracking changes.
  In your model, however, you need to create an attribute ticdsSyncID instead,
  since this framework is designed to be compatible with existing stores that
  use TICDS.
*/
SWIFT_CLASS("_TtC6XUCore15XUManagedObject")
@interface XUManagedObject : NSManagedObject
/**
  Call this when processing an insertion change - this will let the managed
  object class know that an object with this syncUUID has been inserted, so
  that it doesn’t create an unnecessary sync change.
*/
+ (void)noticeSyncInsertionOfObjectWithID:(NSString * _Nonnull)syncUUID;
/**
  This applies the sync change. It asserts that [self syncUUID] ==
  [syncChange objectSyncID].
*/
- (void)applyWithSyncChange:(XUSyncChange * _Nonnull)syncChange;
/**
  It is discouraged to use -awakeFromInsert for one main reason - you usually
  populate fields with default values in -awakeFromInsert. This is completely
  unnecessary and contra-productive when the entity is being created by the sync
  engine, since it overrides all the values anyway.
  Moreover, if you create new objects or relationships within -awakeFromInsert,
  you end up creating new sync changes which is definitely undesirable.
  @note - you must NOT create new entities within -awakeFromInsert! It would
  lead to a deadlock. Use -awakeFromNonSyncInsert instead.
*/
- (void)awakeFromInsert;
/**
  This is called from -awakeFromInsert if the object is not being created by
  the sync engine.
  @note - for this to work, all instances need to be created using
  -initWithEntity:insertIntoManagedObjectContext:
*/
- (void)awakeFromNonSyncInsert;
/**
  This method will create sync change if necessary for this object.
*/
- (NSArray<XUSyncChange *> * _Nonnull)createSyncChanges;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertInto:(NSManagedObjectContext * _Nullable)context asResultOfSyncAction:(BOOL)isSync OBJC_DESIGNATED_INITIALIZER;
/**
  Marked as true if the engine is currently applying a sync change. If you
  are observing some changes made to the object, and creating further changes
  based on that observation, you can opt-out based on this property.
*/
@property (nonatomic, readonly) BOOL isApplyingSyncChange;
/**
  This is an important property that returns YES if the object is being
  created by the sync engine - i.e. the entity was inserted into the context.
  While it may seem unnecessary, you usually populate fields with initial
  values within -awakeFromInsert.
*/
@property (nonatomic, readonly) BOOL isBeingCreatedBySyncEngine;
/**
  Sync UUID. This property is only a proxy to the underlying ticdsSyncID
  which is implemented for backward compatibility with existing stores.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull syncUUID;
@end


/**
  This is just a compatibility class.
*/
SWIFT_CLASS("_TtC6XUCore30TICDSSynchronizedManagedObject")
@interface TICDSSynchronizedManagedObject : XUManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertInto:(NSManagedObjectContext * _Nullable)context asResultOfSyncAction:(BOOL)isSync OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSTimer (SWIFT_EXTENSION(XUCore))
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)seconds repeats:(BOOL)repeats usingBlock:(void (^ _Nonnull)(NSTimer * _Nonnull))fireBlock;
+ (NSTimer * _Nonnull)timerWithTimeInterval:(NSTimeInterval)seconds repeats:(BOOL)repeats usingBlock:(void (^ _Nonnull)(NSTimer * _Nonnull))fireBlock;
@end


@interface UIAlertAction (SWIFT_EXTENSION(XUCore))
/**
  A conveniece for a Cancel action.
*/
- (nonnull instancetype)initWithCancelWithCompletionHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))completionHandler;
@end


@interface UIAlertController (SWIFT_EXTENSION(XUCore))
/**
  Adds a cancel action.
*/
- (void)addCancelActionWithCompletionHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))completionHandler;
/**
  Adds an action with localized “OK” title.
*/
- (void)addOKActionWithCompletionHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))completionHandler;
/**
  Creates a new alert controller with information from the error. By default,
  also adds an OK button. If you want all buttons of the alert to be custom,
  remove the existing action on the controller.
*/
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error completionHandler:(void (^ _Nullable)(void))completionHandler;
/**
  Initializes self with no title or message but with particular style. This
  is to be used like this:
  let alert = UIAlertController(style: .alert)
  alert.message = “123”
  alert.title = “456”
*/
- (nonnull instancetype)initWithStyle:(UIAlertControllerStyle)style;
@end


@interface UIAlertController (SWIFT_EXTENSION(XUCore))
@property (nonatomic, copy) NSString * _Nullable informativeText;
@property (nonatomic, copy) NSString * _Nullable messageText;
@end


@interface UIBezierPath (SWIFT_EXTENSION(XUCore))
@end

@class NSBundle;

@interface UIButton (SWIFT_EXTENSION(XUCore))
- (void)localizeViewWithBundle:(NSBundle * _Nonnull)bundle;
@end

@class UIImage;

@interface UIColor (SWIFT_EXTENSION(XUCore))
/**
  Returns an image with size aSize that is filled with self. May return
  nil if UIGraphicsGetCurrentContext returns nil.
*/
- (UIImage * _Nullable)colorSwatchOfSizeWithASize:(CGSize)aSize;
/**
  Initializes self from a hexString color.
*/
- (nullable instancetype)initWithHexString:(NSString * _Nonnull)originalHexString;
@end


@interface UIFont (SWIFT_EXTENSION(XUCore))
/**
  Returns the same font with bold trait.
*/
@property (nonatomic, readonly, strong) UIFont * _Nullable boldFont;
/**
  Returns the same font with italic trait.
*/
@property (nonatomic, readonly, strong) UIFont * _Nullable italicFont;
/**
  Creates a Helvetica font. Automatically unwrapping the optional. Since
  all sane systems have Helvetica installed, this is bound to work.
*/
- (nonnull instancetype)initWithHelveticaFontOfSize:(CGFloat)size;
/**
  Creates a Helvetica Bold font. Automatically unwrapping the optional.
  Since all sane systems have Helvetica installed, this is bound to work.
*/
- (nonnull instancetype)initWithBoldHelveticaFontOfSize:(CGFloat)size;
@end


@interface UIImage (SWIFT_EXTENSION(XUCore))
/**
  Draws the rect centered within rect. The image is scaled, if necessary.
*/
- (void)drawCenteredIn:(CGRect)rect fraction:(CGFloat)fraction;
/**
  Proportionally scales the image to maximum size.
*/
- (CGSize)proportinallyScaledSizeForMaxSize:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(XUCore))
/**
  Applies color tint to the image.
*/
- (UIImage * _Nonnull)applyingWithTint:(UIColor * _Nonnull)color;
/**
  Returns a proportionally resized image to targetSize.
*/
- (UIImage * _Nonnull)resizedTo:(CGSize)targetSize;
/**
  Returns PNG representation of the image.
*/
@property (nonatomic, readonly, copy) NSData * _Nullable pngRepresentation;
@end


@interface UILabel (SWIFT_EXTENSION(XUCore))
- (void)localizeViewWithBundle:(NSBundle * _Nonnull)bundle;
@end


@interface UINavigationController (SWIFT_EXTENSION(XUCore))
/**
  This method allows you to observe when the navigation controller has
  completed the animation. The completionHandler argument is required -
  if you don’t need it, use the basic popViewControllerAnimated(_:) method.
*/
- (void)popViewControllerWithAnimated:(BOOL)animated completionHandler:(void (^ _Nonnull)(void))completionHandler;
/**
  This method allows you to observe when the navigation controller has
  completed the animation. The completionHandler argument is required -
  if you don’t need it, use the basic popViewControllerAnimated(_:) method.
*/
- (void)popToRootViewControllerAnimatedWithAnimated:(BOOL)animated completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end


@interface UITextField (SWIFT_EXTENSION(XUCore))
- (void)localizeViewWithBundle:(NSBundle * _Nonnull)bundle;
@end


@interface UIView (SWIFT_EXTENSION(XUCore))
- (void)localizeViewWithBundle:(NSBundle * _Nonnull)bundle;
@end

@class UIScrollView;
@class UITableView;
@class UITableViewCell;

@interface UIView (SWIFT_EXTENSION(XUCore))
@property (nonatomic, readonly, strong) UIScrollView * _Nullable enclosingScrollView;
@property (nonatomic, readonly, strong) UITableView * _Nullable enclosingTableView;
@property (nonatomic, readonly, strong) UITableViewCell * _Nullable enclosingTableViewCell;
/**
  Returns the first responder, if there is one in the subview hierarchy.
*/
@property (nonatomic, readonly, strong) UIView * _Nullable firstResponder;
@end


/**
  Transforms the value into Bool. If the value is an array and it is not empty,
  true is returned, false otherwise.
*/
SWIFT_CLASS("_TtC6XUCore26XUArrayNotEmptyTransformer")
@interface XUArrayNotEmptyTransformer : NSValueTransformer
- (id _Nullable)transformedValue:(id _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class XUSyncChangeSet;

/**
  This is a base class for all sync changes. Unlike TICDS, we use subclassing
  instead of attributes to distinguish between sync changes.
  Unfortunately, the initial idea was that it would be required for
  XUManagedObject to be an actual entity, but this kind of went downhill due
  to maintaining backward compatibility with TICDS…
*/
SWIFT_CLASS_NAMED("XUSyncChange")
@interface XUSyncChange : NSManagedObject
/**
  Change set this change belongs to. Nil during initialization, hence nullable,
  but otherwise should be nonnull.
*/
@property (nonatomic, readonly, strong) XUSyncChangeSet * _Null_unspecified changeSet;
/**
  Name of the entity.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull objectEntityName;
/**
  This is generally all we need to identify the object.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull objectSyncID;
/**
  Object that is being sync’ed. Only stored locally.
*/
@property (nonatomic, readonly, weak) XUManagedObject * _Null_unspecified syncObject;
/**
  Timestamp of the change.
*/
@property (nonatomic, readonly) NSTimeInterval timestamp;
/**
  Creates a new sync change.
*/
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context SWIFT_UNAVAILABLE;
@end


/**
  This class represents a change of attribute’s value.
*/
SWIFT_CLASS_NAMED("XUAttributeSyncChange")
@interface XUAttributeSyncChange : XUSyncChange
/**
  Name of the attribute.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull attributeName;
/**
  Value of the attribute.
*/
@property (nonatomic, readonly, strong) id _Nullable attributeValue;
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object attributeName:(NSString * _Nonnull)name andValue:(id _Nullable)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object SWIFT_UNAVAILABLE;
@end

@class NSLayoutConstraint;
@class NSCoder;

/**
  This view will automatically find its height constraint (will throw
  an exception if it doesn’t) and will set it to 0.0 when hidden and restore
  its previous value if not.
*/
SWIFT_CLASS("_TtC6XUCore20XUAutocollapsingView")
@interface XUAutocollapsingView : UIView
- (void)awakeFromNib;
/**
  Returns the constraint that is collapsible. It will return nil before
  the view is loaded from XIB.
*/
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Null_unspecified collapsibleContstraint;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, setter=setHidden:) BOOL isHidden;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  An error subclass that may contain multiple errors.
*/
SWIFT_CLASS("_TtC6XUCore15XUCompoundError")
@interface XUCompoundError : NSError
/**
  Errors of the compound error.
*/
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull errors;
/**
  Inits with errors. Will return nil if the erros array is empty.
*/
- (nullable instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code localizedFailureReason:(NSString * _Nonnull)localizedFailureReason andErrors:(NSArray<NSError *> * _Nonnull)errors OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  This class automatically provides a localized description by putting
  together failure reasons of self.errors.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/**
  This sync change represents a deletion change. We don’t need any further
  information, since we have the syncID.
*/
SWIFT_CLASS_NAMED("XUDeletionSyncChange")
@interface XUDeletionSyncChange : XUSyncChange
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
@end

@class SKProduct;
@class SKPaymentQueue;
@class SKPaymentTransaction;
@class SKProductsRequest;
@class SKProductsResponse;
@class SKRequest;

SWIFT_CLASS("_TtC6XUCore22XUInAppPurchaseManager")
@interface XUInAppPurchaseManager : NSObject <SKRequestDelegate, SKProductsRequestDelegate, SKPaymentTransactionObserver>
/**
  This is the shared instance of the manager. Make sure that you call
  createSharedManagerWithDelegate() before using this!
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) XUInAppPurchaseManager * _Null_unspecified shared;)
+ (XUInAppPurchaseManager * _Null_unspecified)shared;
/**
  Returns true if the manager is currently loading products.
*/
@property (nonatomic, readonly) BOOL isLoadingProducts;
/**
  Products available for purchse.
*/
@property (nonatomic, readonly, copy) NSArray<SKProduct *> * _Nonnull productsAvailableForPurchase;
/**
  A list of identifiers of purchased products.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull purchasedProductIdentifiers;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue restoreCompletedTransactionsFailedWithError:(NSError * _Nonnull)error;
- (void)paymentQueueRestoreCompletedTransactionsFinished:(SKPaymentQueue * _Nonnull)queue;
- (void)productsRequest:(SKProductsRequest * _Nonnull)request didReceiveResponse:(SKProductsResponse * _Nonnull)response;
/**
  Starts a purchase. This is asynchronous and the delegate is notified about
  the outcome.
*/
- (void)purchaseWithProduct:(SKProduct * _Nonnull)product;
/**
  Reloads products available for purchase. Usually is done automatically,
  but you may re-trigger this e.g. on network failure.
*/
- (void)reloadProductsAvailableForPurchase;
- (void)request:(SKRequest * _Nonnull)request didFailWithError:(NSError * _Nonnull)error;
/**
  Starts restoration of purchases. See delegate methods for callbacks.
*/
- (void)restorePurchases;
/**
  Saves the in-app purchases. Seldomly needed to be called manually.
*/
- (void)save;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This class represents a sync change where an object has been inserted
  into the MOC.
*/
SWIFT_CLASS_NAMED("XUInsertionSyncChange")
@interface XUInsertionSyncChange : XUSyncChange
/**
  A list of all attributes. Created by -initWithObject:. Relationships are
  handled by separate relationship changes.
  The dictionary is marked as Transformable, hence it’s not all that efficient
  when it comes to deserialization - if possible, query this property as little
  as possible.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/**
  Name of the entity being inserted. Created by -initWithObject:.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull insertedEntityName;
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object OBJC_DESIGNATED_INITIALIZER;
@end


/**
  All classes that want to be deserialized by the deserializer must conform to
  this protocol. @objc is required for CoreData.
*/
SWIFT_PROTOCOL("_TtP6XUCore20XUJSONDeserializable_")
@protocol XUJSONDeserializable
/**
  This is implemented by NSObject. If you are not basing your class on
  NSObject, you need to do this yourself.
*/
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)forKey;
@optional
/**
  This method is called when the deserializer encounters a dictionary under
  \code
  key
  \endcode. The returned object doesn’t necessarily need to conform to
  XUJSONDeserializable - it can be e.g. NSString.
  @note - If the returned object is not conforming to XUJSONDeserializable,
  the deserializer stops there, otherwise it keeps deserializing
  the dictionary into the returned object.
  <ul>
    <li>
      the deserializer calls this method even if an array of objects is
      stored under this key. In such case, this method is called n-times,
      where n is the number of items in the array.
    </li>
    <li>
      if nil is returned, the object is given another chance in
      performCustomDeserialization* methods.
    </li>
  </ul>
*/
- (id _Nullable)createObjectForKey:(NSString * _Nonnull)key;
/**
  Dates are tricky to deserialize since JSON doesn’t specify a format for
  them. The default implementation assumes ISO8601 format and tries to
  deserialize it. You can customize this behavior.
*/
- (NSDate * _Nullable)dateFromString:(NSString * _Nonnull)dateString forKey:(NSString * _Nonnull)key;
/**
  The serializer supports updating already existing entities from fetched
  content. When the serializer encounters a dictionary, it asks for the
  entityID. If a non-nil object is returned, fetchEntityWithID(_:forKey:)
  is invoked.
  @note - the \code
  key
  \endcode parameter refers to the the key currently being deserialized.
*/
- (id _Nullable)entityIDInDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary forKey:(NSString * _Nonnull)key;
/**
  entityIDInDictionary(_:forKey:) returned a non-nil value which is passed
  as \code
  entityID
  \endcode parameter here. You should return the entity with this ID.
  @note - the \code
  key
  \endcode parameter refers to the the key currently being deserialized.
*/
- (id _Nullable)fetchEntityWithID:(id _Nonnull)entityID forKey:(NSString * _Nonnull)key;
/**
  Return true if you want to ignore this key. If true is returned, the
  deserializer will not call any further methods.
*/
- (BOOL)ignoreKey:(NSString * _Nonnull)key;
/**
  You can observe the fact that you were deserialized by implementing this
  method.
*/
- (void)objectWasDeserializedFromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/**
  When the deserializer encounters an array of strings or numbers (NSNumber),
  it will call this method assuming that those are IDs or some other objects.
  The default implementation returns nil.
*/
- (NSArray * _Nullable)mapIDs:(NSArray * _Nonnull)IDs toObjectsForKey:(NSString * _Nonnull)key;
/**
  When the createObjectForKey(_:) method returns nil, the deserializer
  calls this method. Return true to indicate that the custom deserialization
  was successful, false that it was not.
*/
- (BOOL)performCustomDeserializationOfObject:(NSDictionary<NSString *, id> * _Nonnull)object forKey:(NSString * _Nonnull)key;
/**
  When the createObjectForKey(_:) method returns nil, the deserializer
  calls this method. Return true to indicate that the custom deserialization
  was successful, false that it was not.
*/
- (BOOL)performCustomDeserializationOfObjects:(NSArray * _Nonnull)objects forKey:(NSString * _Nonnull)key;
/**
  Returns the name of the property for that particular key. By default,
  if nil is returned, the deserializer goes through the class’ properties
  and finds one that is a case-insensitive match.
*/
- (NSString * _Nullable)propertyNameForDictionaryRepresentationKey:(NSString * _Nonnull)key;
/**
  Transforms the value to the representation required by the class. Return
  nil if you don’t want transformation for that key to occurr.
*/
- (id _Nullable)transformedValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
@end


/**
  Draws a line at the top of the view.
*/
SWIFT_CLASS("_TtC6XUCore10XULineView")
@interface XULineView : UIView
/**
  By default, the line is drawn at the top of the view for horizontal
  and at the left of the view for vertical lines. This option allows the
  line to be drawn at the bottom, or right side instead.
*/
@property (nonatomic) BOOL alternateAlignment;
/**
  Color of the line.
*/
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/**
  Width of the line.
*/
@property (nonatomic) CGFloat lineWidth;
- (void)awakeFromNib;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface XUManagedObject (SWIFT_EXTENSION(XUCore))
@end


@interface XURegex (SWIFT_EXTENSION(XUCore))
- (nonnull instancetype)init:(NSString * _Nonnull)pattern;
@end


@interface XURegex (SWIFT_EXTENSION(XUCore))
@end


SWIFT_CLASS_NAMED("XURelationshipSyncChange")
@interface XURelationshipSyncChange : XUSyncChange
/**
  Name of the relationship.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull relationshipName;
/**
  Name of the entity of value.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable valueEntityName;
/**
  ID of the object that is being either deleted from or inserted into
  the relationship.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable valueSyncID;
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object relationshipName:(NSString * _Nonnull)relationship andValue:(XUManagedObject * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object SWIFT_UNAVAILABLE;
@end


/**
  A text field whose layer is automatically set a corner radius of half the
  frame height.
*/
SWIFT_CLASS("_TtC6XUCore18XURoundedTextField")
@interface XURoundedTextField : UITextField
- (void)awakeFromNib;
- (void)drawRect:(CGRect)rect;
@property (nonatomic) CGRect bounds;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/**
  To make the syncing more efficient, we group XUSyncChanges in to change sets.
  This allows XUSyncEngine to go just through a few change sets, instead of
  potentially hundreds or even thousands of actual changes.
*/
SWIFT_CLASS_NAMED("XUSyncChangeSet")
@interface XUSyncChangeSet : NSManagedObject
/**
  Fetches all change sets in the supplied MOC.
*/
+ (NSArray<XUSyncChangeSet *> * _Nonnull)allChangeSetsInContext:(NSManagedObjectContext * _Nonnull)ctx withTimestampNewerThan:(NSTimeInterval)timestamp;
/**
  Returns the newest change set in MOC, if one exists.
*/
+ (XUSyncChangeSet * _Nullable)newestChangeSetInContext:(NSManagedObjectContext * _Nonnull)ctx;
/**
  A set of changes within this change set.
*/
@property (nonatomic, readonly, copy) NSSet<XUSyncChange *> * _Nonnull changes;
/**
  Timestamp of the sync change set.
*/
@property (nonatomic, readonly) NSTimeInterval timestamp;
/**
  Desginated initializer.
*/
- (nonnull instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)ctx andChanges:(NSArray<XUSyncChange *> * _Nonnull)changes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context SWIFT_UNAVAILABLE;
@end


/**
  This class represents a change where an object was added into a -to-many
  relationship set.
*/
SWIFT_CLASS_NAMED("XUToManyRelationshipAdditionSyncChange")
@interface XUToManyRelationshipAdditionSyncChange : XURelationshipSyncChange
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object relationshipName:(NSString * _Nonnull)relationship andValue:(XUManagedObject * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
@end


/**
  This class represents a change where an object was removed from a -to-many
  relationship set.
*/
SWIFT_CLASS_NAMED("XUToManyRelationshipDeletionSyncChange")
@interface XUToManyRelationshipDeletionSyncChange : XURelationshipSyncChange
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object relationshipName:(NSString * _Nonnull)relationship andValue:(XUManagedObject * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("XUToOneRelationshipSyncChange")
@interface XUToOneRelationshipSyncChange : XURelationshipSyncChange
- (nonnull instancetype)initWithObject:(XUManagedObject * _Nonnull)object relationshipName:(NSString * _Nonnull)relationship andValue:(XUManagedObject * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Converts the value (must be NSNumber) as +1 and reverse -1.
*/
SWIFT_CLASS("_TtC6XUCore27XUZeroBasedIndexTransformer")
@interface XUZeroBasedIndexTransformer : NSValueTransformer
- (id _Nullable)reverseTransformedValue:(id _Nullable)value;
- (id _Nullable)transformedValue:(id _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Private class that loads all the singletons in XUCore. This is called by
  _XUCoreLoader which implements +load which is not available in Swift. We need,
  however, the loader to be in Swift since not all classes are NSObject-based
  anymore.
*/
SWIFT_CLASS("_TtC6XUCore18_XUSwiftCoreLoader")
@interface _XUSwiftCoreLoader : NSObject
+ (void)loadSingletons;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
